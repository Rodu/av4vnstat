<!DOCTYPE project>
<project name="MusicExplorer" default="all" basedir=".">
	<description>
        MusicExplorer Build File
    </description>
    
    <property file="build.properties" />
    
	<taskdef name="jslint"
        classname="com.googlecode.jslint4java.ant.JSLintTask"
        classpath="${dir.bin}/jslint4java-2.0.2.jar" />
	
	<taskdef name="jsmin"
	    classname="net.matthaynes.jsmin.JSMin_Task"
	    classpath="${dir.bin}/jsmin.0.2.4.jar"/>
	
    <taskdef name="jsdoctoolkit"
	 	classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit"
	 	classpath="${dir.bin}/jsdoc-toolkit-ant-task-1.1.2.jar;${dir.bin}/js.jar"/>
	
    <macrodef name="m-generate-whole-app"
        description="Creates application whole file">
        <attribute name="destdir" />
        <attribute name="destfile" />
        <sequential>
            <echo message="Preparing whole file @{destfile}" />
            <concat destfile="@{destdir}/@{destfile}">
                <path>
                    <fileset dir="${dir.src}/${app.rootNS}" includes="**/*.js" />
                </path>
            </concat>
        </sequential>
    </macrodef>
    
    <macrodef name="m-generate-whole-tests"
        description="Creates Jasmine tests whole file.">
        <sequential>
            <echo message="Preparing whole Jasmine tests file ${app.name}-test.js" />
            <concat destfile="${dir.dist}/test/${app.name}-test.js">
                <path>
                    <fileset dir="${dir.test}/${app.rootNS}" includes="**/*.js" />
                </path>
            </concat>
            <copy todir="${dir.dist}/test/lib">
                <fileset dir="${dir.test}/lib" />
            </copy>
        </sequential>
    </macrodef>
    
     <!--
        This (reusable) macro copies to the destination indicated by
        the parameter given the files contained in the root that
        are not part of dependencies or concatenation.
    -->
    <macrodef name="m-copy-root-files">
        <attribute name="destdir" />
        <sequential>
            <echo message="Copying extra root files" />
            <copy todir="@{destdir}">
                <fileset dir="${dir.src}">
                    <include name="*.js"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    
    <!--
        Generates require main script including needed dependencies.
        The task uses a python script (from bin folder) that generate
        the dependencies Javascript array.
        
        A flag can control the script output. The flag can have the
        following values:
        
        debug=true
        
        generates an entry for every single Javascript file in the app.
        This allows debug on a per-file basis.
        
        debug=false
        
        is intended to be used in release. In this case the script will
        include a single dependency for the dist file that will contain
        the entire application as result of an other concatenation
        task.
        
    -->
    <macrodef name="m-generate-requires"
        description="Generates require main script">
        <attribute name="destdir" />
        <attribute name="debug" />
        <sequential>
            <exec executable="${dir.bin}/require-debug.py"
                    failonerror="true"
                    output="@{destdir}/main.js">
                <arg value="@{debug}" />
                <arg value="${libs.dependencies}" />
                <arg value="${app.rootNS}" />
                <arg value="${app.name}" />
                <arg value="${app.mainClass}" />
            </exec>
            <echo message="Requires OK" />
        </sequential>
    </macrodef>
    
    <macrodef name="m-copy-assets"
        description="Copies to desired folders the application assets">
        <attribute name="destdir" />
        <sequential>
            <echo message="Copying html resources to ${dir.dist}" />
            <copy todir="@{destdir}">
                <fileset dir="${dir.html}">
                    <include name="*.html"/>
                </fileset>
            </copy>
            
            <echo message="Copying Resources to ${dir.dist}" />
            <copy todir="@{destdir}/resources">
                <fileset dir="resources" />
            </copy>
        </sequential>
    </macrodef>
    
    <macrodef name="m-copy-libs">
        <attribute name="destdir" />
        <sequential>
            <copy todir="@{destdir}">
                <fileset dir="${dir.lib}" />
            </copy>
        </sequential>
    </macrodef>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
	</target>
    
    <target name="clean" description="clean up">
		<delete dir="${dir.debug}" />
        <delete dir="${dir.dist}" />
	</target>

	<target name="doc" description="generate the documentation">
        <delete dir="${dir.doc}" />
		<mkdir dir="${dir.doc}" />
		<jsdoctoolkit jsdochome="${dir.bin}/jsdoc-toolkit/"
			template="jsdoc"
			outputdir="${dir.doc}">
				<fileset dir="${dir.src}">
					<include name="**/*.js"/>
	                <exclude name="**/data/*.js"/>
				</fileset>
			</jsdoctoolkit>
	</target>
        
    <!--
        AUTOMATED TESTS
    -->
	<target name="test" depends="clean"
        description="Executes automated tests">
        
        <m-generate-whole-app destdir="${dir.dist}/js" destfile="${app.name}.js" />
        <m-generate-whole-tests />
        
        <copy todir="${dir.dist}/test">
			<fileset dir="${dir.test}">
                <include name="${file.jasmine-test-run}" />
            </fileset>
		</copy>
        
        <echo message="Executing Jasmine tests" />
        <exec executable="${dir.bin}/phantom-jasmine/run_jasmine_test.coffee"
            failonerror="true">
			<arg file="${dir.dist}/test/${file.jasmine-test-run}"/>
		</exec>
        
    </target>
    
    <!--
        DEBUG BUILD
        
        This target will generate a version that can be used for
        debugging during development phase
    -->
	<target name="debug" depends="test"
        description="Generate the debug environment.">
		
        <copy todir="${dir.debug}/js">
			<fileset dir="${dir.src}">
				<include name="**/*.js"/>
			</fileset>
		</copy>
        
        <m-copy-root-files destdir="${dir.debug}/js" />
        <m-copy-assets destdir="${dir.debug}" />
        <m-copy-libs destdir="${dir.debug}/js/lib" />
        <m-generate-requires destdir="${dir.debug}/js" debug="true" />
	</target>
	
    <!--
        RELEASE ENVIRONMENT BUILD
    -->
	<target name="dist" depends="test"
        description="Builds the distribution.">
		
        <echo message="Validating with JSLint" />
		<jslint options="vars,nomen,white,browser,plusplus">
            <predef>jQuery,$,$$,${app.rootNS}</predef>
			<formatter type="plain" />
			<fileset dir="${dir.src}/${app.rootNS}">
                <include name="**/*.js" />
                <exclude name="**/DataSet.js" />
            </fileset>
		</jslint>
		<echo message="JSLint OK" />
        
        <m-copy-libs destdir="${dir.dist}/js/lib" />
        <m-generate-requires destdir="${dir.dist}/js" debug="false" />
        <m-copy-root-files destdir="${dir.dist}/js" />
        <m-copy-assets destdir="${dir.dist}" />
        
        <echo message="Minifying" />
		<jsmin srcfile="${dir.dist}/js/${app.name}.js" suffix="true" />
        <echo message="Minify OK" />
	</target>
    
    <target name="example" depends="dist"
        description="Updates the example files according to dist.">
        <!-- Intentionally keeping this here to not have to commit
             to git a useless deletion. Only when the example task
             will be executed then the changes will be commited to
             git in case. -->
        <delete dir="${dir.example}" />
        
        <echo message="Updating example files" />
        <copy todir="${dir.example}">
			<fileset dir="${dir.dist}" />
		</copy>
    </target>
    
	<target name="all" description="does everithing"
		depends="example,doc" />
</project>
